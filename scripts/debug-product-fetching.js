#!/usr/bin/env node

/**
 * ÂïÜÂìÅÂèñÂæó„Éó„É≠„Çª„Çπ„ÅÆ„Éá„Éê„ÉÉ„Ç∞„Çπ„ÇØ„É™„Éó„Éà
 * fetchMixedProducts„ÅÆÂãï‰Ωú„ÇíÊ§úË®º
 */

require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Áí∞Â¢ÉÂ§âÊï∞„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

// fetchMixedProducts„ÅÆÁ∞°ÊòìÂÆüË£Ö
async function fetchRandomizedProducts(limit = 20, offset = 0, filters = {}) {
  console.log('\nüîÑ fetchRandomizedProductsÂëº„Å≥Âá∫„Åó:', { limit, offset, filters });
  
  let query = supabase
    .from('external_products')
    .select('*')
    .eq('is_active', true);
  
  // „Éï„Ç£„É´„Çø„ÉºÈÅ©Áî®
  if (filters.includeUsed === false) {
    query = query.eq('is_used', false);
  }
  
  // Á∑èÊï∞„ÇíÂèñÂæó
  const { count: totalCount } = await query
    .select('id', { count: 'exact', head: true });
  
  console.log('üìä „Éï„Ç£„É´„Çø„ÉºÂæå„ÅÆÁ∑èÂïÜÂìÅÊï∞:', totalCount);
  
  // ÂÆüÈöõ„ÅÆ„Éá„Éº„Çø„ÇíÂèñÂæó
  const { data, error } = await query
    .order('created_at', { ascending: false })
    .range(offset, offset + limit - 1);
  
  if (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error);
    return { success: false, error: error.message };
  }
  
  console.log(`‚úÖ ÂèñÂæóÊàêÂäü: ${data?.length || 0}‰ª∂`);
  return { success: true, data: data || [] };
}

async function fetchPersonalizedProducts(userId, limit = 20, offset = 0, filters = {}) {
  console.log('\nüéØ fetchPersonalizedProductsÂëº„Å≥Âá∫„Åó:', { userId, limit, offset, filters });
  
  // „Çπ„ÉØ„Ç§„ÉóÂ±•Ê≠¥„ÇíÂèñÂæó
  const { data: swipeData } = await supabase
    .from('swipes')
    .select('product_id, result')
    .eq('user_id', userId)
    .eq('result', 'yes')
    .limit(100);
  
  console.log('üëç Yes„Çπ„ÉØ„Ç§„ÉóÊï∞:', swipeData?.length || 0);
  
  if (!swipeData || swipeData.length === 0) {
    console.log('üîÑ „Çπ„ÉØ„Ç§„ÉóÂ±•Ê≠¥„Å™„Åó„ÄÅÈÄöÂ∏∏„ÅÆÂïÜÂìÅÂèñÂæó„Å´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ');
    return fetchRandomizedProducts(limit, offset, filters);
  }
  
  // ÈÄöÂ∏∏„ÅÆÂïÜÂìÅÂèñÂæó
  return fetchRandomizedProducts(limit, offset, filters);
}

async function fetchMixedProducts(userId = null, limit = 20, offset = 0, filters = {}) {
  console.log('\nüåÄ fetchMixedProductsÂëº„Å≥Âá∫„Åó:', { userId, limit, offset, filters });
  
  const randomCount = Math.floor(limit * 0.7);
  const personalizedCount = limit - randomCount;
  
  console.log('üìä ÂïÜÂìÅ„ÅÆÂÜÖË®≥ - „É©„É≥„ÉÄ„É†:', randomCount, '„Éë„Éº„ÇΩ„Éä„É©„Ç§„Ç∫:', personalizedCount);
  
  // ‰∏¶Âàó„Åß‰∏°Êñπ„ÅÆÂïÜÂìÅ„ÇíÂèñÂæó
  const [randomResult, personalizedResult] = await Promise.all([
    fetchRandomizedProducts(randomCount, offset, filters),
    userId 
      ? fetchPersonalizedProducts(userId, personalizedCount, Math.floor(offset * 1.5), filters)
      : fetchRandomizedProducts(personalizedCount, Math.floor(offset * 1.5), filters)
  ]);
  
  console.log('\nüì¶ ÁµêÊûú:');
  console.log('„É©„É≥„ÉÄ„É†ÂïÜÂìÅ:', randomResult.success ? `${randomResult.data.length}‰ª∂` : '„Ç®„É©„Éº');
  console.log('„Éë„Éº„ÇΩ„Éä„É©„Ç§„Ç∫ÂïÜÂìÅ:', personalizedResult.success ? `${personalizedResult.data.length}‰ª∂` : '„Ç®„É©„Éº');
  
  const randomProducts = randomResult.success ? randomResult.data : [];
  const personalizedProducts = personalizedResult.success ? personalizedResult.data : [];
  
  // ÈáçË§áÈô§Âéª
  const productIdSet = new Set();
  const uniqueProducts = [];
  
  [...randomProducts, ...personalizedProducts].forEach(product => {
    if (!productIdSet.has(product.id)) {
      productIdSet.add(product.id);
      uniqueProducts.push(product);
    }
  });
  
  console.log('üéØ ÈáçË§áÈô§ÂéªÂæå„ÅÆÂïÜÂìÅÊï∞:', uniqueProducts.length);
  
  return { success: true, data: uniqueProducts.slice(0, limit) };
}

// „É°„Ç§„É≥„ÅÆÂÆüË°åÈñ¢Êï∞
async function debugProductFetching() {
  console.log('üöÄ ÂïÜÂìÅÂèñÂæó„ÅÆ„Éá„Éê„ÉÉ„Ç∞„ÇíÈñãÂßã„Åó„Åæ„Åô...\n');
  
  // 1. ÈÄöÂ∏∏„ÅÆÂïÜÂìÅÂèñÂæóÔºàÊñ∞ÂìÅ„ÅÆ„ÅøÔºâ
  console.log('=== „ÉÜ„Çπ„Éà1: Êñ∞ÂìÅ„ÅÆ„Åø„ÅÆÂïÜÂìÅÂèñÂæó ===');
  const result1 = await fetchMixedProducts(null, 20, 0, { includeUsed: false });
  console.log('ÊúÄÁµÇÁµêÊûú:', result1.success ? `${result1.data.length}‰ª∂„ÅÆÂïÜÂìÅ„ÇíÂèñÂæó` : '„Ç®„É©„Éº');
  
  // 2. ‰∏≠Âè§ÂìÅ„ÇíÂê´„ÇÄÂïÜÂìÅÂèñÂæó
  console.log('\n=== „ÉÜ„Çπ„Éà2: Êñ∞ÂìÅ„Éª‰∏≠Âè§ÂìÅ„ÇíÂê´„ÇÄÂïÜÂìÅÂèñÂæó ===');
  const result2 = await fetchMixedProducts(null, 20, 0, { includeUsed: true });
  console.log('ÊúÄÁµÇÁµêÊûú:', result2.success ? `${result2.data.length}‰ª∂„ÅÆÂïÜÂìÅ„ÇíÂèñÂæó` : '„Ç®„É©„Éº');
  
  // 3. „Éï„Ç£„É´„Çø„Éº„Å™„Åó„ÅÆÂïÜÂìÅÂèñÂæó
  console.log('\n=== „ÉÜ„Çπ„Éà3: „Éï„Ç£„É´„Çø„Éº„Å™„Åó„ÅÆÂïÜÂìÅÂèñÂæó ===');
  const result3 = await fetchMixedProducts(null, 20, 0, {});
  console.log('ÊúÄÁµÇÁµêÊûú:', result3.success ? `${result3.data.length}‰ª∂„ÅÆÂïÜÂìÅ„ÇíÂèñÂæó` : '„Ç®„É©„Éº');
  
  // 4. Áõ¥Êé•„Éá„Éº„Çø„Éô„Éº„Çπ„Åã„ÇâÂïÜÂìÅÊï∞„ÇíÁ¢∫Ë™ç
  console.log('\n=== „Éá„Éº„Çø„Éô„Éº„Çπ„ÅÆÁä∂ÊÖãÁ¢∫Ë™ç ===');
  const { count: totalCount } = await supabase
    .from('external_products')
    .select('id', { count: 'exact', head: true });
  
  const { count: activeCount } = await supabase
    .from('external_products')
    .select('id', { count: 'exact', head: true })
    .eq('is_active', true);
  
  const { count: newCount } = await supabase
    .from('external_products')
    .select('id', { count: 'exact', head: true })
    .eq('is_active', true)
    .eq('is_used', false);
  
  const { count: usedCount } = await supabase
    .from('external_products')
    .select('id', { count: 'exact', head: true })
    .eq('is_active', true)
    .eq('is_used', true);
  
  console.log('üìä Á∑èÂïÜÂìÅÊï∞:', totalCount);
  console.log('‚úÖ „Ç¢„ÇØ„ÉÜ„Ç£„ÉñÂïÜÂìÅÊï∞:', activeCount);
  console.log('üÜï Êñ∞ÂìÅÂïÜÂìÅÊï∞:', newCount);
  console.log('‚ôªÔ∏è  ‰∏≠Âè§ÂìÅÂïÜÂìÅÊï∞:', usedCount);
  
  // 5. „Çµ„É≥„Éó„É´ÂïÜÂìÅ„ÇíË°®Á§∫
  console.log('\n=== „Çµ„É≥„Éó„É´ÂïÜÂìÅÔºàÊúÄÊñ∞10‰ª∂Ôºâ ===');
  const { data: sampleProducts } = await supabase
    .from('external_products')
    .select('id, title, brand, is_used, is_active')
    .eq('is_active', true)
    .order('created_at', { ascending: false })
    .limit(10);
  
  sampleProducts?.forEach((p, i) => {
    console.log(`${i + 1}. ${p.title} (${p.brand}) - ${p.is_used ? '‰∏≠Âè§' : 'Êñ∞ÂìÅ'}`);
  });
}

// ÂÆüË°å
debugProductFetching()
  .then(() => {
    console.log('\n‚úÖ „Éá„Éê„ÉÉ„Ç∞ÂÆå‰∫Ü');
    process.exit(0);
  })
  .catch(error => {
    console.error('\n‚ùå „Ç®„É©„Éº:', error);
    process.exit(1);
  });
