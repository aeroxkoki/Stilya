#!/usr/bin/env node
/**
 * Êé®Ëñ¶„Ç∑„Çπ„ÉÜ„É†„ÅÆ„É¢„Éã„Çø„É™„É≥„Ç∞„ÉªÂàÜÊûê„Çπ„ÇØ„É™„Éó„Éà
 */

const { createClient } = require('@supabase/supabase-js');
const dotenv = require('dotenv');
const path = require('path');

// Áí∞Â¢ÉÂ§âÊï∞„ÅÆË™≠„ÅøËæº„Åø
dotenv.config({ path: path.join(__dirname, '..', '..', '.env') });

const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå ÂøÖË¶Å„Å™Áí∞Â¢ÉÂ§âÊï∞„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// Êó•Ê¨°„É¨„Éù„Éº„ÉàÁî®„ÅÆ„Çπ„ÉØ„Ç§„ÉóÁµ±Ë®à„ÇíÂèñÂæó
async function getDailySwipeStats() {
  console.log('üìä Êó•Ê¨°„Çπ„ÉØ„Ç§„ÉóÁµ±Ë®à„ÅÆÂèñÂæó...\n');
  
  try {
    // ÈÅéÂéª7Êó•Èñì„ÅÆ„Çπ„ÉØ„Ç§„Éó„Éá„Éº„Çø„ÇíÈõÜË®à
    const sevenDaysAgo = new Date();
    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
    
    // Êó•Âà•„ÅÆ„Çπ„ÉØ„Ç§„ÉóÁµ±Ë®à„ÇíÂèñÂæó
    const { data, error } = await supabase
      .from('swipes')
      .select('created_at, result, swipe_time_ms')
      .gte('created_at', sevenDaysAgo.toISOString())
      .order('created_at', { ascending: false });
    
    if (error) {
      console.error('„Ç®„É©„Éº:', error);
      return;
    }
    
    // Êó•Âà•„Å´ÈõÜË®à
    const dailyStats = {};
    
    data.forEach(swipe => {
      const date = new Date(swipe.created_at).toLocaleDateString('ja-JP');
      
      if (!dailyStats[date]) {
        dailyStats[date] = {
          total: 0,
          yes: 0,
          no: 0,
          totalSwipeTime: 0,
          swipeCount: 0
        };
      }
      
      dailyStats[date].total++;
      if (swipe.result === 'yes') {
        dailyStats[date].yes++;
      } else {
        dailyStats[date].no++;
      }
      
      if (swipe.swipe_time_ms) {
        dailyStats[date].totalSwipeTime += swipe.swipe_time_ms;
        dailyStats[date].swipeCount++;
      }
    });
    
    // ÁµêÊûú„ÇíË°®Á§∫
    console.log('Êó•‰ªò\t\tÁ∑èÊï∞\tYes\tNo\tYesÁéá\tÂπ≥ÂùáÊôÇÈñì(Áßí)');
    console.log('='.repeat(60));
    
    Object.entries(dailyStats)
      .sort((a, b) => new Date(b[0]) - new Date(a[0]))
      .forEach(([date, stats]) => {
        const yesRate = ((stats.yes / stats.total) * 100).toFixed(1);
        const avgTime = stats.swipeCount > 0 
          ? (stats.totalSwipeTime / stats.swipeCount / 1000).toFixed(1)
          : '-';
        
        console.log(`${date}\t${stats.total}\t${stats.yes}\t${stats.no}\t${yesRate}%\t${avgTime}`);
      });
      
  } catch (error) {
    console.error('Áµ±Ë®àÂèñÂæó„Ç®„É©„Éº:', error);
  }
}

// „Ç´„ÉÜ„Ç¥„É™Âà•ÂïÜÂìÅÂàÜÂ∏É„ÇíÁ¢∫Ë™ç
async function getCategoryDistribution() {
  console.log('\n\nüì¶ „Ç´„ÉÜ„Ç¥„É™Âà•ÂïÜÂìÅÂàÜÂ∏É\n');
  
  try {
    const { data, error } = await supabase
      .from('external_products')
      .select('source_category, is_active')
      .eq('is_active', true);
    
    if (error) {
      console.error('„Ç®„É©„Éº:', error);
      return;
    }
    
    // „Ç´„ÉÜ„Ç¥„É™Âà•„Å´ÈõÜË®à
    const categoryCount = {};
    
    data.forEach(product => {
      const category = product.source_category || '„Åù„ÅÆ‰ªñ';
      categoryCount[category] = (categoryCount[category] || 0) + 1;
    });
    
    // ÁµêÊûú„ÇíË°®Á§∫
    console.log('„Ç´„ÉÜ„Ç¥„É™\t\tÂïÜÂìÅÊï∞\tÂâ≤Âêà');
    console.log('='.repeat(40));
    
    const total = Object.values(categoryCount).reduce((a, b) => a + b, 0);
    
    Object.entries(categoryCount)
      .sort((a, b) => b[1] - a[1])
      .forEach(([category, count]) => {
        const percentage = ((count / total) * 100).toFixed(1);
        console.log(`${category.padEnd(16)}\t${count}\t${percentage}%`);
      });
      
    console.log('='.repeat(40));
    console.log(`ÂêàË®à\t\t\t${total}`);
    
  } catch (error) {
    console.error('„Ç´„ÉÜ„Ç¥„É™ÂàÜÂ∏ÉÂèñÂæó„Ç®„É©„Éº:', error);
  }
}

// ‰∫∫Ê∞óÂïÜÂìÅ„É©„É≥„Ç≠„É≥„Ç∞
async function getPopularProducts() {
  console.log('\n\nüèÜ ‰∫∫Ê∞óÂïÜÂìÅ„É©„É≥„Ç≠„É≥„Ç∞ÔºàÁõ¥Ëøë30Êó•Ôºâ\n');
  
  try {
    const thirtyDaysAgo = new Date();
    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
    
    // Yes„Çπ„ÉØ„Ç§„Éó„Åï„Çå„ÅüÂïÜÂìÅ„ÇíÈõÜË®à
    const { data: swipes, error: swipeError } = await supabase
      .from('swipes')
      .select('product_id')
      .eq('result', 'yes')
      .gte('created_at', thirtyDaysAgo.toISOString());
    
    if (swipeError) {
      console.error('„Ç®„É©„Éº:', swipeError);
      return;
    }
    
    // ÂïÜÂìÅID„Åî„Å®„Å´„Ç´„Ç¶„É≥„Éà
    const productCounts = {};
    swipes.forEach(swipe => {
      productCounts[swipe.product_id] = (productCounts[swipe.product_id] || 0) + 1;
    });
    
    // ‰∏ä‰Ωç10ÂïÜÂìÅ„ÇíÂèñÂæó
    const topProductIds = Object.entries(productCounts)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10)
      .map(([id]) => id);
    
    // ÂïÜÂìÅÊÉÖÂ†±„ÇíÂèñÂæó
    const { data: products, error: productError } = await supabase
      .from('external_products')
      .select('id, title, brand, price, tags')
      .in('id', topProductIds);
    
    if (productError) {
      console.error('„Ç®„É©„Éº:', productError);
      return;
    }
    
    // ÁµêÊûú„ÇíË°®Á§∫
    console.log('È†Ü‰Ωç\tYesÊï∞\tÂïÜÂìÅÂêç\t\t\t\t„Éñ„É©„É≥„Éâ\t‰æ°Ê†º');
    console.log('='.repeat(80));
    
    topProductIds.forEach((productId, index) => {
      const product = products.find(p => p.id === productId);
      const count = productCounts[productId];
      
      if (product) {
        const title = product.title.length > 30 
          ? product.title.substring(0, 30) + '...' 
          : product.title;
        
        console.log(
          `${index + 1}\t${count}\t${title.padEnd(32)}\t${(product.brand || '-').padEnd(16)}\t¬•${product.price.toLocaleString()}`
        );
      }
    });
    
  } catch (error) {
    console.error('‰∫∫Ê∞óÂïÜÂìÅÂèñÂæó„Ç®„É©„Éº:', error);
  }
}

// A/B„ÉÜ„Çπ„ÉàÁµêÊûú„ÅÆÂàÜÊûêÔºà„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥Ôºâ
async function analyzeABTestResults() {
  console.log('\n\nüî¨ A/B„ÉÜ„Çπ„ÉàÁµêÊûúÂàÜÊûêÔºà„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥Ôºâ\n');
  
  try {
    // „É¶„Éº„Ç∂„Éº„Çí‰ªÆÊÉ≥ÁöÑ„Å´2„Ç∞„É´„Éº„Éó„Å´ÂàÜ„Åë„Çã
    const { data: users, error: userError } = await supabase
      .from('swipes')
      .select('user_id')
      .limit(1000);
    
    if (userError) {
      console.error('„Ç®„É©„Éº:', userError);
      return;
    }
    
    // „É¶„Éº„Ç∂„ÉºID„ÅÆÈáçË§á„ÇíÈô§Âéª
    const uniqueUserIds = [...new Set(users.map(u => u.user_id))];
    
    // „Ç∞„É´„Éº„ÉóÂàÜ„ÅëÔºàÊúÄÂæå„ÅÆÊñáÂ≠ó„ÅÆ16ÈÄ≤Êï∞ÂÄ§„ÅßÂà§ÂÆöÔºâ
    const controlUsers = [];
    const improvedUsers = [];
    
    uniqueUserIds.forEach(userId => {
      const lastChar = userId.slice(-1);
      const value = parseInt(lastChar, 16);
      
      if (value % 2 === 0) {
        controlUsers.push(userId);
      } else {
        improvedUsers.push(userId);
      }
    });
    
    // ÂêÑ„Ç∞„É´„Éº„Éó„ÅÆ„Çπ„ÉØ„Ç§„Éó„Éá„Éº„Çø„ÇíÂèñÂæó
    const { data: controlSwipes } = await supabase
      .from('swipes')
      .select('result')
      .in('user_id', controlUsers.slice(0, 50)); // Âá¶ÁêÜÊôÇÈñìÁü≠Á∏Æ„ÅÆ„Åü„ÇÅ50‰∫∫„Åæ„Åß
    
    const { data: improvedSwipes } = await supabase
      .from('swipes')
      .select('result')
      .in('user_id', improvedUsers.slice(0, 50));
    
    // YesÁéá„ÇíË®àÁÆó
    const controlYesRate = controlSwipes 
      ? (controlSwipes.filter(s => s.result === 'yes').length / controlSwipes.length * 100).toFixed(1)
      : 0;
    
    const improvedYesRate = improvedSwipes
      ? (improvedSwipes.filter(s => s.result === 'yes').length / improvedSwipes.length * 100).toFixed(1)
      : 0;
    
    console.log('„Ç∞„É´„Éº„Éó\t„É¶„Éº„Ç∂„ÉºÊï∞\t„Çπ„ÉØ„Ç§„ÉóÊï∞\tYesÁéá');
    console.log('='.repeat(50));
    console.log(`Control\t\t${controlUsers.length}\t\t${controlSwipes?.length || 0}\t\t${controlYesRate}%`);
    console.log(`Improved\t${improvedUsers.length}\t\t${improvedSwipes?.length || 0}\t\t${improvedYesRate}%`);
    
    const improvement = improvedYesRate - controlYesRate;
    console.log(`\nÊîπÂñÑÁéá: ${improvement > 0 ? '+' : ''}${improvement.toFixed(1)}%`);
    
  } catch (error) {
    console.error('A/B„ÉÜ„Çπ„ÉàÂàÜÊûê„Ç®„É©„Éº:', error);
  }
}

// „É°„Ç§„É≥Âá¶ÁêÜ
async function main() {
  console.log('üöÄ Êé®Ëñ¶„Ç∑„Çπ„ÉÜ„É†„É¢„Éã„Çø„É™„É≥„Ç∞ÈñãÂßã\n');
  console.log(`ÂÆüË°åÊó•ÊôÇ: ${new Date().toLocaleString('ja-JP')}`);
  console.log('='.repeat(80));
  
  // ÂêÑÂàÜÊûê„ÇíÂÆüË°å
  await getDailySwipeStats();
  await getCategoryDistribution();
  await getPopularProducts();
  await analyzeABTestResults();
  
  console.log('\n\n‚úÖ „É¢„Éã„Çø„É™„É≥„Ç∞ÂÆå‰∫Ü');
}

// ÂÆüË°å
if (require.main === module) {
  main().catch(error => {
    console.error('„É°„Ç§„É≥Âá¶ÁêÜ„Ç®„É©„Éº:', error);
    process.exit(1);
  });
}

module.exports = { main };
