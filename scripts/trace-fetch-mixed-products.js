#!/usr/bin/env node

/**
 * ÂÆüÈöõ„ÅÆfetchMixedProducts„ÅÆÂãï‰Ωú„ÇíË©≥Á¥∞„Å´„Éà„É¨„Éº„Çπ
 */

require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Áí∞Â¢ÉÂ§âÊï∞„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

// ÂÆüÈöõ„ÅÆfetchRandomizedProducts„ÅÆÁ∞°ÊòìÁâà
async function testFetchRandomizedProducts(limit = 20, offset = 0, filters = {}) {
  console.log('\nüîÑ fetchRandomizedProductsË©≥Á¥∞„Éà„É¨„Éº„Çπ');
  console.log('ÂÖ•Âäõ:', { limit, offset, filters });
  
  // ÊôÇÈñì„Éô„Éº„Çπ„ÅÆ„Ç™„Éï„Çª„ÉÉ„ÉàÔºàÂÆüÈöõ„ÅÆ„Ç≥„Éº„Éâ„Å®Âêå„Åò„É≠„Ç∏„ÉÉ„ÇØÔºâ
  const timeOffset = new Date().getHours() % 24;
  const adjustedOffset = offset + timeOffset;
  
  // poolSize„ÅÆË®àÁÆó
  const poolSize = limit * 3;
  
  console.log('Ë®àÁÆóÂÄ§:', {
    timeOffset,
    adjustedOffset,
    poolSize
  });
  
  // „ÇØ„Ç®„É™„ÅÆÊßãÁØâ
  let query = supabase
    .from('external_products')
    .select('*')
    .eq('is_active', true);
  
  // „Éï„Ç£„É´„Çø„ÉºÈÅ©Áî®
  if (filters.includeUsed === false) {
    query = query.eq('is_used', false);
  }
  
  // „Ç´„Ç¶„É≥„ÉàÂèñÂæóÔºàÂà•„ÇØ„Ç®„É™Ôºâ
  let countQuery = supabase
    .from('external_products')
    .select('id', { count: 'exact', head: true })
    .eq('is_active', true);
  
  if (filters.includeUsed === false) {
    countQuery = countQuery.eq('is_used', false);
  }
  
  const { count: totalCount } = await countQuery;
  console.log('Á∑èÂïÜÂìÅÊï∞:', totalCount);
  
  // offsetË™øÊï¥
  let actualOffset = adjustedOffset;
  if (totalCount && actualOffset >= totalCount) {
    actualOffset = Math.floor(Math.random() * Math.max(0, totalCount - poolSize));
    console.log('„Ç™„Éï„Çª„ÉÉ„ÉàË™øÊï¥:', actualOffset);
  }
  
  // ÂÆüÈöõ„ÅÆ„Éá„Éº„ÇøÂèñÂæó
  const randomOrder = Math.random() > 0.5 ? 'created_at' : 'last_synced';
  const randomDirection = Math.random() > 0.5;
  
  console.log('„ÇØ„Ç®„É™Ë®≠ÂÆö:', {
    order: randomOrder,
    ascending: randomDirection,
    rangeStart: actualOffset,
    rangeEnd: actualOffset + poolSize - 1
  });
  
  const { data, error } = await query
    .order(randomOrder, { ascending: randomDirection })
    .range(actualOffset, actualOffset + poolSize - 1);
  
  if (error) {
    console.error('‚ùå „Ç®„É©„Éº:', error);
    return { success: false, error: error.message };
  }
  
  console.log('ÂèñÂæóÁµêÊûú:', {
    Ë¶ÅÊ±ÇÊï∞: poolSize,
    ÂÆüÈöõ„ÅÆÂèñÂæóÊï∞: data?.length || 0,
    range„ÅÆÂïèÈ°å: actualOffset + poolSize > totalCount ? `ÁØÑÂõ≤Ë∂ÖÈÅé: ${actualOffset + poolSize} > ${totalCount}` : 'OK'
  });
  
  // ÊúÄÁµÇÁöÑ„Å™ÂïÜÂìÅÊï∞ÔºàlimitÂàÜ„Å†„ÅëËøî„ÅôÔºâ
  const finalProducts = data?.slice(0, limit) || [];
  console.log('ÊúÄÁµÇÂïÜÂìÅÊï∞:', finalProducts.length);
  
  return { success: true, data: finalProducts };
}

// „É°„Ç§„É≥ÂÆüË°å
async function main() {
  console.log('üöÄ fetchMixedProducts„ÅÆÂãï‰ΩúË©≥Á¥∞Ë™øÊüª\n');
  
  // ÂÆüÈöõ„ÅÆfetchMixedProducts„Å®Âêå„Åò„Éë„É©„É°„Éº„Çø„Åß„ÉÜ„Çπ„Éà
  const limit = 20;
  const offset = 0;
  const filters = { includeUsed: false };
  
  const bufferMultiplier = 1.5;
  const randomCount = Math.floor(limit * 0.7 * bufferMultiplier);
  const personalizedCount = Math.floor(limit * 0.3 * bufferMultiplier);
  
  console.log('fetchMixedProducts„ÅÆ„Éë„É©„É°„Éº„Çø:');
  console.log(`„É©„É≥„ÉÄ„É†ÂïÜÂìÅÊï∞: ${randomCount}`);
  console.log(`„Éë„Éº„ÇΩ„Éä„É©„Ç§„Ç∫ÂïÜÂìÅÊï∞: ${personalizedCount}`);
  
  // „É©„É≥„ÉÄ„É†ÂïÜÂìÅ„ÅÆÂèñÂæó„ÉÜ„Çπ„Éà
  const randomResult = await testFetchRandomizedProducts(randomCount, offset, filters);
  
  // „Éë„Éº„ÇΩ„Éä„É©„Ç§„Ç∫ÂïÜÂìÅ„ÅÆÂèñÂæó„ÉÜ„Çπ„ÉàÔºàÈÄöÂ∏∏„ÅÆfetchProducts„Çí„Ç∑„Éü„É•„É¨„Éº„ÉàÔºâ
  console.log('\nüì¶ ÈÄöÂ∏∏„ÅÆÂïÜÂìÅÂèñÂæóÔºà„Éë„Éº„ÇΩ„Éä„É©„Ç§„Ç∫Áî®Ôºâ');
  const { data: normalData, error: normalError } = await supabase
    .from('external_products')
    .select('*')
    .eq('is_active', true)
    .eq('is_used', false)
    .order('priority', { ascending: true })
    .order('last_synced', { ascending: false })
    .range(0, personalizedCount - 1);
  
  console.log('„Éë„Éº„ÇΩ„Éä„É©„Ç§„Ç∫ÂïÜÂìÅÂèñÂæóÁµêÊûú:', normalData ? `${normalData.length}‰ª∂` : '„Ç®„É©„Éº');
}

main()
  .then(() => {
    console.log('\n‚úÖ Ë™øÊüªÂÆå‰∫Ü');
    process.exit(0);
  })
  .catch(error => {
    console.error('\n‚ùå „Ç®„É©„Éº:', error);
    process.exit(1);
  });
