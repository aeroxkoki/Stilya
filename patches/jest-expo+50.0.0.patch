diff --git a/node_modules/jest-expo/src/preset/setup.js b/node_modules/jest-expo/src/preset/setup.js
index 00000000..11111111 100644
--- a/node_modules/jest-expo/src/preset/setup.js
+++ b/node_modules/jest-expo/src/preset/setup.js
@@ -16,6 +16,58 @@ if (typeof window !== 'object') {
   globalThis.window.navigator = {};
 }
 
+// Ensure globalThis.expo exists with proper interfaces for EventEmitter, NativeModule, SharedObject
+if (!globalThis.expo) {
+  globalThis.expo = {
+    EventEmitter: class {
+      constructor() {
+        this.listeners = {};
+      }
+      addListener(eventName, listener) {
+        if (!this.listeners[eventName]) {
+          this.listeners[eventName] = [];
+        }
+        this.listeners[eventName].push(listener);
+        return { remove: () => this.removeListener(eventName, listener) };
+      }
+      removeListener(eventName, listener) {
+        if (this.listeners[eventName]) {
+          this.listeners[eventName] = this.listeners[eventName].filter(l => l !== listener);
+        }
+      }
+      removeAllListeners(eventName) {
+        if (eventName) {
+          delete this.listeners[eventName];
+        } else {
+          this.listeners = {};
+        }
+      }
+      emit(eventName, ...args) {
+        if (this.listeners[eventName]) {
+          this.listeners[eventName].forEach(listener => {
+            listener(...args);
+          });
+        }
+      }
+    },
+    NativeModule: class {
+      constructor(name) {
+        this.name = name || 'MockNativeModule';
+      }
+    },
+    SharedObject: class {
+      constructor(id) {
+        this.id = id || 'MockSharedObject';
+      }
+    }
+  };
+}
+
+// Ensure ExpoModulesCore is defined to avoid undeclared reference errors
+if (!globalThis.ExpoModulesCore) {
+  globalThis.ExpoModulesCore = {
+    uuid: { v4: () => 'mock-uuid-v4', v5: () => 'mock-uuid-v5' }
+  };
+}
+
 if (typeof globalThis.__REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
   // RN 0.74 checks for the __REACT_DEVTOOLS_GLOBAL_HOOK__ on startup if getInspectorDataForViewAtPoint is used
   // React Navigation uses getInspectorDataForViewAtPoint() for improved log box integration in non-production builds
@@ -220,7 +272,10 @@ function attemptLookup(moduleName) {
 try {
   jest.doMock('expo-modules-core', () => {
     const ExpoModulesCore = jest.requireActual('expo-modules-core');
-    const uuid = jest.requireActual('expo-modules-core/src/uuid/uuid.web');
+    
+    // Use our custom UUID mock instead of requiring it again
+    const customUuid = jest.requireActual('../../../src/__mocks__/uuid');
+    
 
     const { EventEmitter, NativeModule, SharedObject } = globalThis.expo;
 
@@ -228,8 +283,8 @@ try {
     const { NativeModulesProxy } = ExpoModulesCore;
 
     // Mock the `uuid` object with the implementation for web.
-    ExpoModulesCore.uuid.v4 = uuid.default.v4;
-    ExpoModulesCore.uuid.v5 = uuid.default.v5;
+    ExpoModulesCore.uuid.v4 = customUuid.v4;
+    ExpoModulesCore.uuid.v5 = customUuid.v5;
 
     // After the NativeModules mock is set up, we can mock NativeModuleProxy's functions that call
     // into the native proxy module. We're not really interested in checking whether the underlying
