name: Test Suite

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_ENV: test
  NODE_OPTIONS: "--max-old-space-size=4096 --no-warnings --experimental-vm-modules"
  TZ: "Asia/Tokyo"

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 20
        cache: 'npm'
    
    - name: Setup environment
      run: |
        # CIに適したnpmrc設定
        echo "cache=false" > .npmrc
        echo "prefer-offline=false" >> .npmrc
        echo "fund=false" >> .npmrc
        echo "audit=false" >> .npmrc
        
        # キャッシュのクリーンアップ
        rm -rf node_modules/.cache
        rm -rf ~/.expo/cache
        rm -rf ~/.metro-cache
    
    - name: Install dependencies
      run: |
        npm ci --no-audit --no-fund
        npm install --no-save jest-junit@16.0.0 patch-package
        
        # Metro関連依存関係を揃える（テスト環境用）
        npm install --no-save \
          metro@0.77.0 \
          metro-core@0.77.0 \
          @babel/runtime@7.27.1
      
    - name: Prepare test environment
      run: |
        # 1. パッチの適用
        if [ -d "patches" ] && [ "$(ls -A patches)" ]; then
          echo "✅ Applying patches with patch-package"
          npx patch-package
        else
          # 代替スクリプトを実行
          echo "⚙️ Running legacy patch script"
          chmod +x ./scripts/patch-jest-expo.sh
          ./scripts/patch-jest-expo.sh
        fi
        
        # 2. TerminalReporterの設定
        echo "🛠️ Setting up test reporters"
        mkdir -p __tests__
        
        # JestテストレポーターとMetroのTerminalReporterを共通スクリプトで準備
        chmod +x ./scripts/create-terminal-reporter.sh
        ./scripts/create-terminal-reporter.sh
        
        # 3. テスト実行のための環境変数
        echo "✓ Test environment ready"
    
    - name: Run tests
      run: |
        # uuid問題を修正してから実行
        npm run test:fix-uuid
        
        # JUnit形式でレポートを出力 (CI統合用)
        JEST_JUNIT_OUTPUT_DIR=./test-results JEST_JUNIT_OUTPUT_NAME=junit.xml \
        npx jest --config jest.config.js --ci --reporters=default --reporters=jest-junit
      
    - name: Generate test summary
      if: always()
      run: |
        if [ -d "test-results" ]; then
          echo "📊 Generating test summary"
          npm run test:summary || true
        fi
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports
        path: |
          test-results/
          **/junit*.xml
