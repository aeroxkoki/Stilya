name: Build Stilya App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Expo/EAS設定
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      EAS_SKIP_JAVASCRIPT_BUNDLING: 1
      EAS_NO_VCS: 1
      EAS_LOCAL_BUILD_ARTIFACTS_DIR: ./build-artifacts
      EAS_LOCAL_BUILD_SKIP_CLEANUP: 1
      EXPO_NO_CACHE: 1
      
      # ビルド環境設定
      NODE_OPTIONS: --max-old-space-size=8192
      NODE_ENV: production
      BUILD_TYPE: local
      
      # キーストア設定
      ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Clean lock files
        run: |
          rm -f yarn.lock
          echo "✅ Removed duplicate lock files"

      - name: Install dependencies
        run: |
          npm ci
          npm install -g eas-cli@latest expo-cli@latest
          # metro-configを明示的にインストール
          npm install --save-dev @expo/metro-config@0.9.0 --force
          npm dedupe
          echo "✅ Dependencies installed"

      - name: Create TerminalReporter
        run: |
          mkdir -p node_modules/metro/src/lib
          cat > node_modules/metro/src/lib/TerminalReporter.js << 'EOL'
          /**
           * Metro Reporter for compatibility with Expo SDK 53.
           */
          "use strict";
          class TerminalReporter {
            constructor(terminal) {
              this._terminal = terminal;
              this._errors = [];
              this._warnings = [];
            }
            handleError(error) { this._errors.push(error); }
            handleWarning(warning) { this._warnings.push(warning); }
            getErrors() { return this._errors; }
            getWarnings() { return this._warnings; }
            update() {}
            terminal() { return this._terminal; }
          }
          module.exports = TerminalReporter;
          EOL
          chmod 644 node_modules/metro/src/lib/TerminalReporter.js
          echo "✅ TerminalReporter.js created"

      - name: Verify dependencies
        run: |
          if [ -d "node_modules/@expo/metro-config" ]; then
            echo "✅ @expo/metro-config is installed"
          else
            echo "❌ @expo/metro-config is NOT installed"
            npm install --save-dev @expo/metro-config@0.9.0 --force
            if [ -d "node_modules/@expo/metro-config" ]; then
              echo "✅ @expo/metro-config is now installed"
            else
              echo "❌ Failed to install @expo/metro-config"
              exit 1
            fi
          fi

      - name: Clear cache
        run: |
          rm -rf node_modules/.cache
          rm -rf ~/.expo/cache
          rm -rf ~/.metro-cache
          rm -rf .expo
          rm -rf .expo-shared
          echo "✅ Caches cleared"

      - name: Verify Metro compatibility
        run: |
          if [ -f "node_modules/metro/src/lib/TerminalReporter.js" ]; then
            echo "✅ TerminalReporter.js exists"
          else
            echo "❌ TerminalReporter.js not found"
            exit 1
          fi

      - name: Setup Expo
        run: |
          # expo-doctorを実行
          npx expo-doctor || true # エラーが出ても続行
          
          # expo環境変数設定
          export EAS_NO_VCS=1
          export EAS_LOCAL_BUILD_ARTIFACTS_DIR=./build-artifacts
          export EAS_LOCAL_BUILD_SKIP_CLEANUP=1
          
          # EAS設定確認
          npx eas-cli --version
          npx expo install --check || true # 依存関係のチェック（エラーは無視）

      - name: Prepare keystore
        if: env.ANDROID_KEYSTORE_BASE64 != ''
        run: |
          mkdir -p android/app
          echo ${{ secrets.ANDROID_KEYSTORE_BASE64 }} | base64 --decode > android/app/stilya-keystore.jks
          echo '{"android":{"keystore":{"keystorePath":"android/app/stilya-keystore.jks","keystorePassword":"${{ secrets.ANDROID_KEYSTORE_PASSWORD }}","keyAlias":"${{ secrets.ANDROID_KEY_ALIAS }}","keyPassword":"${{ secrets.ANDROID_KEY_PASSWORD }}"}}}' > credentials.json
          echo "✅ Keystore prepared"

      - name: Build Android App
        run: |
          echo "🏗️ local ビルドを実行します..."
          
          # ローカルビルド環境変数を明示的に設定
          export EAS_NO_VCS=1
          export EAS_LOCAL_BUILD_ARTIFACTS_DIR=./build-artifacts
          export EAS_LOCAL_BUILD_SKIP_CLEANUP=1
          export EXPO_NO_CACHE=1
          export NODE_ENV=production
          
          # エラーが出た場合のログ出力強化
          set -o pipefail
          
          # ローカルビルド
          echo "💻 ローカルビルドを実行します..."
          chmod +x ./scripts/local-android-build.sh
          ./scripts/local-android-build.sh
          
          # ビルド結果の確認
          if [ -f "stilya-release.apk" ]; then
            echo "✅ ローカルビルドが成功しました"
            ls -la stilya-release.apk
          else
            echo "❌ ローカルビルドが失敗しました"
            # エラーログ収集
            mkdir -p build-logs
            find . -name "*.log" -type f -exec cp {} build-logs/ \;
            find android -name "*.log" -type f -exec cp {} build-logs/ \;
            echo "ログを build-logs ディレクトリにコピーしました"
            exit 1
          fi

      - name: Upload APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: stilya-app
          path: stilya-release.apk
          
      - name: Upload Build Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            build-logs/
            **/build/**/*.log
            android/app/build/outputs/logs/
            ~/.npm/_logs/
