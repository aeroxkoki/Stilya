name: Expo Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Install expo-cli globally
        run: npm install -g expo-cli@latest eas-cli@latest
      
      - name: Clean cache
        run: |
          rm -rf node_modules/.cache
          rm -rf ~/.expo
          rm -rf ~/.metro
      
      - name: Apply Metro dependencies fix
        run: |
          chmod +x ./fix-metro-dependencies.sh
          ./fix-metro-dependencies.sh
      
      - name: Verify emergency patch exists
        run: |
          if [ -f "emergency-fix.js" ]; then
            echo "Emergency patch exists"
          else
            echo "Creating emergency patch file"
            cat > emergency-fix.js << 'EOF'
/**
 * Emergency fix for Metro bundler JSON parsing issues in GitHub Actions
 * This script patches the JSON.parse method to handle malformed JSON in Metro bundler.
 */

console.log('[EMERGENCY] Applying JSON.parse patch for Metro bundler...');

// Store the original JSON.parse
const originalJSONParse = JSON.parse;

// Override JSON.parse with a more resilient version
JSON.parse = function patchedJSONParse(text, reviver) {
  try {
    return originalJSONParse(text, reviver);
  } catch (e) {
    console.warn('[EMERGENCY PATCH] JSON parse error detected. Attempting recovery...');
    console.warn(`Original error: ${e.message}`);
    
    // Handle common issues in Metro bundler JSON
    let fixedText = text;
    
    // Fix unescaped newlines in strings
    fixedText = fixedText.replace(/([":,[\]{}])([\r\n]+)([":,[\]{}])/g, '$1 $3');
    
    // Fix trailing commas in arrays/objects
    fixedText = fixedText.replace(/,\s*([}\]])/g, '$1');
    
    try {
      return originalJSONParse(fixedText, reviver);
    } catch (recoveryError) {
      console.error('[EMERGENCY PATCH] Recovery failed:', recoveryError.message);
      // If we can't fix it, throw the original error
      throw e;
    }
  }
};

// Check if we're in the Metro bundler context
try {
  const fs = require('fs');
  const path = require('path');
  
  // Define paths to check for Metro bundler files
  const possiblePaths = [
    path.join(process.cwd(), 'node_modules/@expo/cli/build/src/start/server/metro/MetroBundlerDevServer.js'),
    path.join(process.cwd(), 'node_modules/expo/node_modules/@expo/cli/build/src/start/server/metro/MetroBundlerDevServer.js'),
    path.join(process.cwd(), 'node_modules/metro/src/Server.js'),
  ];
  
  console.log('Searching for MetroBundlerDevServer files...');
  possiblePaths.forEach(p => {
    if (fs.existsSync(p)) {
      console.log(`Found: ${p}`);
    } else {
      console.log(`Not found: ${p}`);
    }
  });
  
  console.log('Setting up JSON.parse patch...');
  console.log('[EMERGENCY] JSON.parseパッチが適用されました');
  console.log('Successfully loaded patch');
} catch (e) {
  console.error('Error in emergency patch setup:', e);
}
EOF
          fi
          chmod +x emergency-fix.js
      
      - name: Build standalone export script
        run: |
          cat > run-export-embed.js << 'EOF'
const { spawnSync } = require('child_process');
const path = require('path');
const fs = require('fs');

// パッチを適用
require('./emergency-fix.js');

console.log('Running expo export:embed in standalone mode...');

// npx expo-cli を使用して実行
const result = spawnSync('npx', ['expo', 'export:embed', '--eager', '--platform', 'android', '--dev', 'false'], {
  stdio: 'inherit',
  env: {
    ...process.env,
    EXPO_NO_CACHE: 'true',
    FORCE_COLOR: '1'
  }
});

// 失敗した場合、詳細情報を出力
if (result.status !== 0) {
  console.error('Export failed with status:', result.status);
  
  // Metro設定を確認
  if (fs.existsSync('./metro.config.js')) {
    console.log('metro.config.js content:');
    console.log(fs.readFileSync('./metro.config.js', 'utf8'));
  }
  
  // 依存関係を確認
  console.log('Checking Metro dependencies:');
  try {
    const pkg = require('./package.json');
    console.log('Metro version:', pkg.devDependencies.metro);
    console.log('@expo/metro-config version:', pkg.devDependencies['@expo/metro-config']);
  } catch (e) {
    console.error('Error checking dependencies:', e);
  }
}

process.exit(result.status);
EOF
          chmod +x run-export-embed.js
      
      - name: Run build with emergency patch
        run: |
          # Node.jsプロセスで緊急パッチを読み込む
          export NODE_OPTIONS="--require $(pwd)/emergency-fix.js --no-warnings --max-old-space-size=8192"
          export EXPO_DEBUG=true
          
          # 環境情報を出力
          echo "NODE_OPTIONS: $NODE_OPTIONS"
          node -e "console.log('Node.js version:', process.version)"
          
          # メトロバンドラーのパス情報を出力
          echo "Searching for MetroBundlerDevServer files..."
          find node_modules -name "MetroBundlerDevServer.*" -type f 2>/dev/null || echo "Not found in node_modules"
          
          # 独立したNode.jsスクリプトを実行
          node run-export-embed.js
      
      - name: Report build information
        if: always()
        run: |
          echo "Build completed with status: $?"
          echo "Installed packages:"
          npm list --depth=0
          
          echo "Metro dependencies:"
          npm list metro metro-config @expo/metro-config
