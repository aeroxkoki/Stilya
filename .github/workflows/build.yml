name: Android Build for Stilya (MVP)

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      build_type:
        description: 'ビルドタイプ'
        required: true
        default: 'local'
        type: choice
        options:
          - local
          - eas

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      EAS_SKIP_JAVASCRIPT_BUNDLING: 1
      NODE_OPTIONS: "--max-old-space-size=8192"
      NODE_ENV: "production"
      # Android Keystore関連の環境変数
      ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🧰 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 🔧 Enable Yarn
        run: corepack enable

      - name: 📦 Install dependencies
        run: yarn install

      - name: 🧹 Clear cache
        run: |
          rm -rf ~/.expo ~/.cache/metro .expo .expo-shared
          yarn cache clean

      - name: 📦 Fix Metro compatibility issues
        run: |
          # 緊急対応：直接ファイルを作成する方法を試します
          echo "🚨 直接ファイル作成方式でMetro互換性問題を修正します..."
          chmod +x ./scripts/fix-metro-serializer-direct.sh
          ./scripts/fix-metro-serializer-direct.sh
          
          # TerminalReporter.jsファイルの存在確認
          if [ ! -f "node_modules/metro/src/lib/TerminalReporter.js" ]; then
            echo "⚠️ ファイルが見つかりません。手動で作成します..."
            mkdir -p node_modules/metro/src/lib
            cat > node_modules/metro/src/lib/TerminalReporter.js << 'EOL'
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow strict-local
 * @format
 */

'use strict';

class TerminalReporter {
  constructor(terminal) {
    this._terminal = terminal;
    this._errors = [];
    this._warnings = [];
  }

  handleError(error) {
    this._errors.push(error);
  }

  handleWarning(warning) {
    this._warnings.push(warning);
  }

  getErrors() {
    return this._errors;
  }

  getWarnings() {
    return this._warnings;
  }

  update() {}
  terminal() { return this._terminal; }
}

module.exports = TerminalReporter;
EOL
            chmod 644 node_modules/metro/src/lib/TerminalReporter.js
            echo "✅ ファイルを手動で作成しました"
          fi
          
          # ファイルの存在と内容を確認
          if [ -f "node_modules/metro/src/lib/TerminalReporter.js" ]; then
            ls -la node_modules/metro/src/lib/TerminalReporter.js
            echo "📋 ファイルの先頭部分:"
            head -n 5 node_modules/metro/src/lib/TerminalReporter.js
            echo "✅ TerminalReporter.js exists and has content"
          else
            echo "❌ CRITICAL ERROR: TerminalReporter.js still does not exist!"
            exit 1
          fi

      - name: 🔧 Install EAS CLI
        run: yarn global add eas-cli@16.6.1

      - name: 🔑 Setup Android keystore
        run: |
          echo "Setting up Android keystore..."
          # android/app ディレクトリの存在を確認して作成
          mkdir -p android/app
          
          # credentials.json をルートディレクトリに作成
          echo '{
            "android": {
              "keystore": {
                "keystorePath": "android/app/stilya-keystore.jks",
                "keystorePassword": "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}",
                "keyAlias": "${{ secrets.ANDROID_KEY_ALIAS }}",
                "keyPassword": "${{ secrets.ANDROID_KEY_PASSWORD }}"
              }
            }
          }' > credentials.json
          
          # BASE64エンコードされたキーストアがある場合はデコード
          if [ ! -z "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" ]; then
            echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/app/stilya-keystore.jks
            echo "Keystore decoded and saved to android/app/stilya-keystore.jks"
            ls -la android/app/stilya-keystore.jks || echo "Keystore file not found!"
          else
            echo "No ANDROID_KEYSTORE_BASE64 provided, running create-dummy-keystore.sh"
            chmod +x ./scripts/create-dummy-keystore.sh
            ./scripts/create-dummy-keystore.sh
          fi
          
          # credentials.jsonのパーミッションを確認
          chmod 644 credentials.json
          echo "Set credentials.json permissions to 644"

      - name: 🔍 ビルド前準備を実行
        run: |
          chmod +x ./scripts/pre-eas-build.sh
          ./scripts/pre-eas-build.sh

      - name: 🔍 Credentials状態を確認
        run: |
          chmod +x ./scripts/debug-credentials.sh
          ./scripts/debug-credentials.sh

      - name: 📱 ビルドタイプの決定
        id: build_type
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "BUILD_TYPE=${{ github.event.inputs.build_type }}" >> $GITHUB_ENV
          else
            echo "BUILD_TYPE=local" >> $GITHUB_ENV
          fi
          echo "選択されたビルドタイプ: ${{ env.BUILD_TYPE }}"

      - name: 🛠 Run EAS build
        if: env.BUILD_TYPE == 'eas'
        run: |
          echo "📱 Running EAS build..."
          eas whoami
          
          # ビルド実行 - EAS Build
          eas build --platform android --profile ci --non-interactive --no-wait
          echo "✅ ビルドは EAS Build サーバーで実行されます"

      - name: 🛠 Run Local build
        if: env.BUILD_TYPE == 'local'
        run: |
          echo "📱 Running local build..."
          
          # スキップフラグを明示的に設定
          export EXPO_NO_CACHE=true
          export EAS_SKIP_JAVASCRIPT_BUNDLING=1
          export NODE_OPTIONS="--max-old-space-size=8192"
          
          # 緊急対応：直接修正を適用
          npm run fix-metro-emergency
          
          # ファイルの存在確認
          echo "確認: TerminalReporter.jsが存在するか確認します..."
          ls -la node_modules/metro/src/lib/TerminalReporter.js || echo "ファイルが見つかりません"
          
          # ローカルビルド実行
          chmod +x ./scripts/local-android-build.sh
          bash ./scripts/local-android-build.sh
          
          # ビルド結果の確認
          if [ -f "stilya-release.apk" ]; then
            echo "✅ Local build successful"
            ls -la stilya-release.apk
          else
            echo "❌ Local build failed"
            exit 1
          fi

      - name: 📦 Upload APK artifact
        if: env.BUILD_TYPE == 'local' && success()
        uses: actions/upload-artifact@v4
        with:
          name: stilya-apk
          path: stilya-release.apk
          retention-days: 7
