name: Build Stilya App

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # Expo/EAS設定
      EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
      EAS_SKIP_JAVASCRIPT_BUNDLING: 1
      EAS_NO_VCS: 1
      EAS_LOCAL_BUILD_ARTIFACTS_DIR: ./build-artifacts
      EAS_LOCAL_BUILD_SKIP_CLEANUP: 1
      EXPO_NO_CACHE: 1
      
      # ビルド環境設定
      NODE_OPTIONS: --max-old-space-size=8192
      NODE_ENV: production
      BUILD_TYPE: local
      
      # キーストア設定
      ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          cache: 'npm'

      - name: Clean lock files and cache
        run: |
          rm -f yarn.lock
          rm -rf node_modules/.cache
          rm -rf ~/.expo/cache
          rm -rf ~/.metro-cache
          echo "✅ Removed lock files and caches"

      - name: Install dependencies
        run: |
          npm ci
          npm install -g eas-cli@latest expo-cli@latest
          echo "✅ Core dependencies installed"

      - name: Install Metro dependencies
        run: |
          # すべてのMetro依存関係をインストール
          npm install --save-dev \
            metro@0.77.0 \
            metro-core@0.77.0 \
            metro-runtime@0.77.0 \
            metro-config@0.77.0 \
            metro-resolver@0.77.0 \
            metro-transform-worker@0.77.0 \
            metro-source-map@0.77.0 \
            @expo/metro-config@0.9.0 \
            --force
          npm dedupe
          echo "✅ Metro dependencies installed"

      - name: Create TerminalReporter
        run: |
          mkdir -p node_modules/metro/src/lib
          cat > node_modules/metro/src/lib/TerminalReporter.js << 'EOL'
          /**
           * Metro compatibility layer for Expo SDK 53
           */
          class TerminalReporter {
            constructor(terminal) {
              this._terminal = terminal || {
                log: console.log.bind(console),
                error: console.error.bind(console),
                info: console.info.bind(console),
                warn: console.warn.bind(console)
              };
              this._errors = [];
              this._warnings = [];
            }

            handleError(error) {
              this._errors.push(error);
            }

            handleWarning(warning) {
              this._warnings.push(warning);
            }

            getErrors() {
              return this._errors;
            }

            getWarnings() {
              return this._warnings;
            }

            update() {}
            
            terminal() { 
              return this._terminal; 
            }
          }

          module.exports = TerminalReporter;
          EOL
          chmod 644 node_modules/metro/src/lib/TerminalReporter.js
          echo "✅ TerminalReporter.js created"

      - name: Verify Metro setup
        run: |
          # メトロ関連パッケージの確認
          if [ -d "node_modules/metro-core" ] && [ -d "node_modules/metro" ] && [ -f "node_modules/metro/src/lib/TerminalReporter.js" ]; then
            echo "✅ Metro setup verified successfully"
          else
            echo "⚠️ Metro setup incomplete, fixing..."
            
            # 必要なディレクトリを作成
            mkdir -p node_modules/metro-core/src
            mkdir -p node_modules/metro/src/lib
            
            # metro-coreの最小実装
            echo '{
              "name": "metro-core",
              "version": "0.77.0",
              "main": "src/index.js"
            }' > node_modules/metro-core/package.json
            
            echo 'class Terminal {
              constructor() {
                this._log = console.log.bind(console);
                this._error = console.error.bind(console);
              }
              log(...args) { this._log(...args); }
              error(...args) { this._error(...args); }
              info(...args) { this._log(...args); }
              warn(...args) { this._log(...args); }
            }
            module.exports = { Terminal };' > node_modules/metro-core/src/index.js
            
            # TerminalReporterを再作成
            echo 'class TerminalReporter {
              constructor(terminal) {
                this._terminal = terminal || console;
                this._errors = [];
                this._warnings = [];
              }
              handleError(error) { this._errors.push(error); }
              handleWarning(warning) { this._warnings.push(warning); }
              getErrors() { return this._errors; }
              getWarnings() { return this._warnings; }
              update() {}
              terminal() { return this._terminal; }
            }
            module.exports = TerminalReporter;' > node_modules/metro/src/lib/TerminalReporter.js
            
            echo "✅ Emergency Metro setup complete"
          fi

      - name: Install explicit dependencies
        run: |
          # 明示的に必要なパッケージをインストール
          npm install --save-dev \
            metro-core@0.77.0 \
            metro-runtime@0.77.0 \
            metro-babel-transformer@0.77.0 \
            metro-react-native-babel-transformer@0.77.0 \
            @babel/runtime@7.27.1 \
            --force
          npm dedupe
          echo "✅ Additional dependencies installed"

      - name: Configure package.json for Metro
        run: |
          # package.jsonのresolitionsセクションが正しいことを確認
          jq '.resolutions["metro-core"] = "0.77.0" | 
              .resolutions["metro-runtime"] = "0.77.0" | 
              .resolutions["@expo/metro-config"] = "0.9.0"' package.json > package.json.tmp
          mv package.json.tmp package.json
          echo "✅ package.json configured"

      - name: Setup Expo
        run: |
          # expo-doctorを実行
          npx expo-doctor || true # エラーが出ても続行
          
          # expo環境変数設定
          export EAS_NO_VCS=1
          export EAS_LOCAL_BUILD_ARTIFACTS_DIR=./build-artifacts
          export EAS_LOCAL_BUILD_SKIP_CLEANUP=1
          
          # EAS設定確認
          npx eas-cli --version
          npx expo install --check || true # 依存関係のチェック（エラーは無視）

      - name: Prepare keystore
        if: env.ANDROID_KEYSTORE_BASE64 != ''
        run: |
          mkdir -p android/app
          echo ${{ secrets.ANDROID_KEYSTORE_BASE64 }} | base64 --decode > android/app/stilya-keystore.jks
          echo '{
            "android": {
              "keystore": {
                "keystorePath": "android/app/stilya-keystore.jks",
                "keystorePassword": "${{ secrets.ANDROID_KEYSTORE_PASSWORD }}",
                "keyAlias": "${{ secrets.ANDROID_KEY_ALIAS }}",
                "keyPassword": "${{ secrets.ANDROID_KEY_PASSWORD }}"
              }
            }
          }' > credentials.json
          echo "✅ Keystore prepared"

      - name: Build Android App
        run: |
          echo "🏗️ Building Android app..."
          
          # ローカルビルド環境変数を明示的に設定
          export EAS_NO_VCS=1
          export EAS_LOCAL_BUILD_ARTIFACTS_DIR=./build-artifacts
          export EAS_LOCAL_BUILD_SKIP_CLEANUP=1
          export EXPO_NO_CACHE=1
          export NODE_ENV=production
          
          # 事前にprebuildを実行
          npx expo prebuild --platform android --clean
          
          # ビルドを実行
          cd android
          ./gradlew assembleRelease
          cd ..
          
          # ビルド結果のファイル移動
          mkdir -p dist
          cp android/app/build/outputs/apk/release/app-release.apk dist/stilya-release.apk
          
          # ビルド結果の確認
          if [ -f "dist/stilya-release.apk" ]; then
            echo "✅ Build successful"
            ls -la dist/stilya-release.apk
          else
            echo "❌ Build failed"
            # エラーログ収集
            mkdir -p build-logs
            find . -name "*.log" -type f -exec cp {} build-logs/ \;
            find android -name "*.log" -type f -exec cp {} build-logs/ \;
            echo "Logs copied to build-logs directory"
            exit 1
          fi

      - name: Upload APK
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: stilya-app
          path: dist/stilya-release.apk
          
      - name: Upload Build Logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            build-logs/
            **/build/**/*.log
            android/app/build/outputs/logs/
            ~/.npm/_logs/
