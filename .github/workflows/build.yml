name: Stilya CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: テスト実行
    runs-on: ubuntu-latest
    
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
      
      - name: Node.js セットアップ
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: NODE_OPTIONS の環境変数設定
        run: echo "NODE_OPTIONS=--max-old-space-size=8192" >> $GITHUB_ENV
      
      - name: Expo CLI インストール
        run: npm install -g expo-cli@latest eas-cli@latest
      
      - name: npm キャッシュ
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: 依存関係のインストール
        run: npm ci
      
      - name: Metro依存関係の修正
        run: |
          chmod +x ./scripts/fix-metro-dependencies.sh
          ./scripts/fix-metro-dependencies.sh
      
      - name: Jest 設定の拡張
        run: |
          echo "Jestの設定を拡張します..."
          # jest.config.jsに結果レポーターを追加
          grep -q "reporters:" jest.config.js || node -e "
            const fs = require('fs');
            const config = require('./jest.config.js');
            
            config.reporters = [
              'default',
              ['jest-junit', {
                outputDirectory: 'test-results',
                outputName: 'junit.xml',
              }]
            ];
            
            fs.writeFileSync('jest.config.js', 'module.exports = ' + JSON.stringify(config, null, 2));
          "
          # jest-junit がインストールされていることを確認
          npm list jest-junit || npm install --save-dev jest-junit
      
      - name: 基本テスト（必須）
        id: basic_tests
        run: npm run test src/__tests__/basic.test.js src/__tests__/simple.test.js -- --json --outputFile=basic-test-results.json
        continue-on-error: true
      
      - name: 重要な機能テスト（必須）
        id: auth_tests
        run: npm run test src/__tests__/auth/authStore.test.ts -- --json --outputFile=auth-test-results.json
        continue-on-error: true
        
      - name: その他のテスト（オプション）
        id: other_tests
        run: |
          echo "その他のテストを実行します（失敗しても続行します）"
          npm run test -- --testPathIgnorePatterns="basic.test.js|simple.test.js|authStore.test.ts" --json --outputFile=other-test-results.json || echo "一部のテストが失敗しましたが、開発を継続します"
        continue-on-error: true
      
      - name: テスト結果サマリーの生成
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let summary = '## テスト結果サマリー 📊\n\n';
            
            // ヘルパー関数
            const readTestResults = (fileName, testType) => {
              try {
                if (fs.existsSync(fileName)) {
                  const data = JSON.parse(fs.readFileSync(fileName, 'utf8'));
                  const totalTests = data.numTotalTests || 0;
                  const passedTests = data.numPassedTests || 0;
                  const failedTests = data.numFailedTests || 0;
                  const pendingTests = data.numPendingTests || 0;
                  
                  // 結果表示用テーブル行
                  summary += `### ${testType} (${passedTests}/${totalTests})\n\n`;
                  
                  if (failedTests > 0) {
                    summary += `❌ **失敗したテスト: ${failedTests}件**\n\n`;
                    summary += '| テスト名 | エラーメッセージ |\n';
                    summary += '| ------- | --------------- |\n';
                    
                    const failedTestDetails = data.testResults
                      .flatMap(suite => suite.assertionResults)
                      .filter(test => test.status === 'failed')
                      .map(test => {
                        const testName = test.fullName || test.title;
                        const errorMsg = test.failureMessages[0]
                          ?.split('\n')[0]
                          ?.replace(/\|/g, '\\|')
                          ?.substring(0, 100) + (test.failureMessages[0]?.length > 100 ? '...' : '') || 'エラー詳細なし';
                        
                        return `| ${testName} | ${errorMsg} |`;
                      });
                    
                    summary += failedTestDetails.join('\n');
                    summary += '\n\n';
                  } else {
                    summary += `✅ **すべてのテストが成功しました**\n\n`;
                  }
                  
                  return { totalTests, passedTests, failedTests, pendingTests };
                }
              } catch (error) {
                summary += `### ${testType} - 結果解析エラー\n\n`;
                summary += `⚠️ **テスト結果の解析中にエラーが発生しました: ${error.message}**\n\n`;
              }
              
              return { totalTests: 0, passedTests: 0, failedTests: 0, pendingTests: 0 };
            };
            
            // 各テスト結果を読み取り
            const basicResults = readTestResults('basic-test-results.json', 'Basic Tests');
            const authResults = readTestResults('auth-test-results.json', 'Auth Tests');
            const otherResults = readTestResults('other-test-results.json', 'Other Tests');
            
            // 総合スタッツ
            const totalResults = {
              totalTests: basicResults.totalTests + authResults.totalTests + otherResults.totalTests,
              passedTests: basicResults.passedTests + authResults.passedTests + otherResults.passedTests,
              failedTests: basicResults.failedTests + authResults.failedTests + otherResults.failedTests,
              pendingTests: basicResults.pendingTests + authResults.pendingTests + otherResults.pendingTests
            };
            
            // 合格率の計算
            const passRate = totalResults.totalTests > 0 
              ? Math.round((totalResults.passedTests / totalResults.totalTests) * 100) 
              : 0;
            
            // 総合サマリーを追加
            summary += `### 総合結果\n\n`;
            summary += `- 全テスト: ${totalResults.totalTests}\n`;
            summary += `- 成功: ${totalResults.passedTests} ✅\n`;
            summary += `- 失敗: ${totalResults.failedTests} ❌\n`;
            summary += `- 保留: ${totalResults.pendingTests} ⏳\n`;
            summary += `- 合格率: ${passRate}%\n\n`;
            
            // テスト結果のステータス判定
            const testStatus = totalResults.failedTests === 0 ? '✅ PASS' : '❌ FAIL';
            summary += `## 最終判定: ${testStatus}\n\n`;
            
            if (totalResults.failedTests > 0) {
              summary += `> **注意**: 失敗したテストがあります。エラーメッセージを確認して修正してください。\n`;
            }
            
            // サマリー作成
            await core.summary
              .addHeading('Stilya テスト結果')
              .addRaw(summary)
              .write();
            
            // コンソールにも出力
            console.log(summary);
            
            // 次のステップに情報を渡す
            core.setOutput('testsPassed', totalResults.failedTests === 0);
            core.setOutput('passRate', passRate);
      
      - name: テスト結果のアップロード
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            basic-test-results.json
            auth-test-results.json
            other-test-results.json
            test-results/*.xml
          if-no-files-found: ignore
      
      - name: テスト結果確認
        if: always()
        run: |
          echo "テスト結果は GitHub Actions のサマリーで確認できます。"
          FAIL_COUNT=$(cat basic-test-results.json auth-test-results.json other-test-results.json 2>/dev/null | grep -o '"numFailedTests":[0-9]*' | awk -F: '{sum+=$2} END {print sum}')
          
          if [ "$FAIL_COUNT" -gt "0" ]; then
            echo "::warning::テストに失敗があります。サマリータブで詳細を確認してください。"
            echo "以下の必須テストはすべて成功する必要があります："
            echo "- Basic Tests (basic.test.js, simple.test.js)"
            echo "- Auth Tests (authStore.test.ts)"
            
            # 必須テストが失敗した場合はワークフローを失敗させる
            BASIC_FAIL=$(cat basic-test-results.json 2>/dev/null | grep -o '"numFailedTests":[0-9]*' | awk -F: '{print $2}')
            AUTH_FAIL=$(cat auth-test-results.json 2>/dev/null | grep -o '"numFailedTests":[0-9]*' | awk -F: '{print $2}')
            
            if [ "$BASIC_FAIL" -gt "0" ] || [ "$AUTH_FAIL" -gt "0" ]; then
              echo "::error::必須テストに失敗があります。"
              exit 1
            else
              echo "::notice::必須テストは成功しています。オプションテストのエラーは開発を続行できます。"
            fi
          else
            echo "::notice::すべてのテストが成功しました！"
          fi
  
  build:
    name: アプリビルド
    runs-on: ubuntu-latest
    needs: test
    # main/developブランチへのpushまたはワークフロー手動実行時のみビルド
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    env:
      EAS_SKIP_JAVASCRIPT_BUNDLING: "1"
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
      
      - name: Node.js セットアップ
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: NODE_OPTIONS の環境変数設定
        run: echo "NODE_OPTIONS=--max-old-space-size=8192" >> $GITHUB_ENV
      
      - name: Expo CLI インストール
        run: npm install -g expo-cli@latest eas-cli@latest
      
      - name: npm キャッシュ
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: 依存関係のインストール
        run: npm ci
      
      - name: キャッシュクリア
        run: |
          rm -rf node_modules/.cache
          rm -rf ~/.expo/cache
          rm -rf .expo
          rm -rf .expo-shared
      
      - name: Expo ログイン
        uses: expo/expo-github-action@v8
        with:
          eas-version: '7.8.5'
          token: ${{ secrets.EXPO_TOKEN }}
      
      - name: Metro依存関係の修正
        run: |
          chmod +x ./scripts/fix-metro-dependencies.sh
          ./scripts/fix-metro-dependencies.sh
      
      - name: EASプロジェクト初期化
        run: |
          # app.jsonからプロジェクトIDを取得
          PROJECT_ID=$(node -e "console.log(require('./app.json').expo.extra.eas.projectId || '')")
          echo "📋 ProjectID: $PROJECT_ID"
          
          # app.jsonからownerを取得
          OWNER=$(node -e "console.log(require('./app.json').expo.owner || '')")
          echo "👤 Owner: $OWNER"
          
          # EASプロジェクトを初期化（プロジェクトIDを指定）
          if [ -n "$PROJECT_ID" ]; then
            npx eas-cli project:init --id="$PROJECT_ID" --non-interactive || echo "プロジェクトはすでに存在します"
          else
            npx eas-cli project:init --non-interactive || echo "新規プロジェクト作成に失敗しました"
          fi
          
          # プロジェクト情報を表示
          npx eas-cli project:info || echo "プロジェクト情報を取得できません"
      
      - name: EASビルド環境確認
        run: |
          chmod +x ./scripts/eas-build-debug.sh
          ./scripts/eas-build-debug.sh
      
      - name: EAS プロジェクト情報を確認
        run: |
          npx eas-cli project:info || echo "プロジェクト情報の取得に失敗しました"
          
      - name: app.jsonの確認
        run: |
          echo "app.json の内容確認中..."
          cat app.json | grep -A 3 "owner"
          cat app.json | grep -A 3 "projectId"
          
      - name: EAS ビルド実行 (詳細モード)
        run: |
          echo "🚀 EAS ビルド開始前にキャッシュを完全にクリア..."
          npm cache clean --force
          rm -rf node_modules/.cache
          rm -rf ~/.expo/cache
          rm -rf .expo
          rm -rf .expo-shared
          rm -rf .metro-cache
          
          echo "🚀 EAS ビルド実行中..."
          npx eas-cli build --platform android --profile ci --non-interactive --verbose
        
      - name: ビルド完了通知
        if: success()
        run: echo "✅ ビルドが正常に完了しました。"
        
  update:
    name: OTAアップデート配信
    runs-on: ubuntu-latest
    needs: test
    # mainブランチへのプッシュまたはワークフロー手動実行時のみ実行
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: リポジトリをチェックアウト
        uses: actions/checkout@v4
      
      - name: Node.js セットアップ
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: NODE_OPTIONS の環境変数設定
        run: echo "NODE_OPTIONS=--max-old-space-size=8192" >> $GITHUB_ENV
      
      - name: Expo CLI インストール
        run: npm install -g expo-cli@latest eas-cli@latest
      
      - name: 依存関係のインストール
        run: npm ci
      
      - name: Expo ログイン
        uses: expo/expo-github-action@v8
        with:
          eas-version: '7.8.5'
          token: ${{ secrets.EXPO_TOKEN }}
      
      - name: EAS Update 実行
        run: |
          # Android向けアップデート
          npx eas-cli update --platform android --message "$(git log -1 --pretty=%B)" --non-interactive
          
          # iOS向けアップデート（将来的に必要な場合）
          # npx eas-cli update --platform ios --message "$(git log -1 --pretty=%B)" --non-interactive
      
      - name: 更新完了通知
        if: success()
        run: echo "✅ OTAアップデートが正常に配信されました。"
