name: Unified Product Sync - Phase 3 (50-60 Brands)

on:
  schedule:
    # メイン同期: 毎日午前2時（JST）
    - cron: '0 17 * * *'  # UTC 17:00 = JST 2:00
    # サブ同期: 毎日午後2時（JST）- 軽量更新用
    - cron: '0 5 * * *'   # UTC 5:00 = JST 14:00
  workflow_dispatch:
    inputs:
      sync_mode:
        description: 'Sync mode'
        required: false
        default: 'full'
        type: choice
        options:
          - full         # フル同期（50-60ブランド、50,000+商品）
          - extended     # 拡張MVP（30ブランド）
          - mvp          # MVP優先ブランドのみ（5ブランド）
          - seasonal     # 季節商品優先
          - age_targeted # 年代別最適化
          - maintenance  # メンテナンスのみ
          - test         # テストモード（ドライラン）
      
      priority_filter:
        description: 'Priority filter (0-7, or all)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - '0'  # スーパー優先（UNIQLO, GU, 無印良品）
          - '1'  # ファストファッション
          - '2'  # 人気ECブランド
          - '3'  # セレクトショップ
          - '4'  # ライフスタイル
          - '5'  # 年齢層特化
          - '6'  # トレンド・個性派
          - '7'  # 百貨店・ハイブランド
      
      target_age_group:
        description: 'Target age group'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - '20-24'  # 20代前半
          - '25-29'  # 20代後半
          - '30-34'  # 30代前半
          - '35-39'  # 30代後半
          - '40-45'  # 40代
      
      target_brands:
        description: 'Specific brands only (comma-separated)'
        required: false
        type: string
      
      product_limit:
        description: 'Product limit per brand'
        required: false
        default: 'progressive'
        type: choice
        options:
          - progressive  # 段階的増加（推奨）
          - minimal      # 最小限（100-500）
          - standard     # 標準（500-2000）
          - maximum      # 最大（2000-10000）
      
      enable_features:
        description: 'Enable features'
        required: false
        default: 'all'
        type: choice
        options:
          - all          # 全機能有効
          - scoring      # スコアリングのみ
          - seasonal     # 季節優先度のみ
          - ml_tags      # 機械学習タグのみ
          - age_analysis # 年代分析のみ
          - basic        # 基本機能のみ
      
      maintenance_tasks:
        description: 'Maintenance tasks'
        required: false
        default: 'all'
        type: choice
        options:
          - all          # 全メンテナンス
          - cleanup      # 古い商品削除
          - optimize     # DB最適化
          - stats        # 統計更新
          - rotation     # 商品ローテーション
          - none         # メンテナンスなし
      
      dry_run:
        description: 'Dry run mode (no DB changes)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  unified-sync:
    name: Unified Product Sync
    runs-on: ubuntu-latest
    timeout-minutes: 180  # 3時間のタイムアウト（大規模同期対応）
    
    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: |
          npm ci
          npm install --save-prod dotenv @supabase/supabase-js axios

      - name: 🔍 Pre-sync environment check
        id: env_check
        run: |
          echo "## 🔍 Environment Check" >> $GITHUB_STEP_SUMMARY
          echo "- Date: $(date '+%Y-%m-%d %H:%M:%S JST')" >> $GITHUB_STEP_SUMMARY
          echo "- Sync mode: ${{ github.event.inputs.sync_mode || 'full' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Priority filter: ${{ github.event.inputs.priority_filter || 'all' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Target age: ${{ github.event.inputs.target_age_group || 'all' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Product limit: ${{ github.event.inputs.product_limit || 'progressive' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Features: ${{ github.event.inputs.enable_features || 'all' }}" >> $GITHUB_STEP_SUMMARY
          echo "- Dry run: ${{ github.event.inputs.dry_run || 'false' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 季節判定
          MONTH=$(date +%m)
          if [[ $MONTH -ge 3 && $MONTH -le 5 ]]; then
            SEASON="春 🌸"
            echo "season=spring" >> $GITHUB_ENV
          elif [[ $MONTH -ge 6 && $MONTH -le 8 ]]; then
            SEASON="夏 ☀️"
            echo "season=summer" >> $GITHUB_ENV
          elif [[ $MONTH -ge 9 && $MONTH -le 11 ]]; then
            SEASON="秋 🍁"
            echo "season=autumn" >> $GITHUB_ENV
          else
            SEASON="冬 ❄️"
            echo "season=winter" >> $GITHUB_ENV
          fi
          echo "- Current season: $SEASON" >> $GITHUB_STEP_SUMMARY
          
          # 必須環境変数チェック
          if [ -z "${{ secrets.SUPABASE_URL }}" ]; then
            echo "❌ SUPABASE_URL is not set" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          if [ -z "${{ secrets.RAKUTEN_APP_ID }}" ]; then
            echo "❌ RAKUTEN_APP_ID is not set" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          echo "✅ All required environment variables are set" >> $GITHUB_STEP_SUMMARY

      - name: 🗄️ Supabase free tier monitoring
        id: capacity_check
        run: |
          echo "## 🗄️ Supabase Free Tier Monitoring" >> $GITHUB_STEP_SUMMARY
          
          # 無料枠モニタリングスクリプトを実行
          node scripts/monitoring/supabase-free-tier-monitor.js >> monitoring_report.txt 2>&1 || true
          
          if [ -f monitoring_report.txt ]; then
            # レポートの要約を抽出
            echo "### 📊 Current Usage:" >> $GITHUB_STEP_SUMMARY
            grep -E "総商品数:|使用率:|推定使用量:" monitoring_report.txt | head -5 >> $GITHUB_STEP_SUMMARY || true
            echo "" >> $GITHUB_STEP_SUMMARY
            
            # 最適化提案を抽出
            echo "### 💡 Optimization Suggestions:" >> $GITHUB_STEP_SUMMARY
            awk '/最適化提案:/{flag=1} /=====/{flag=0} flag' monitoring_report.txt | grep -E "✅|⚠️|🚨|ℹ️" | head -5 >> $GITHUB_STEP_SUMMARY || true
          fi
          
          # 容量チェック（45,000件で警告、これは500MBの約90%相当）
          TOTAL_COUNT=$(grep -oP '総商品数: \K[\d,]+' monitoring_report.txt | tr -d ',' || echo "0")
          USAGE_PERCENT=$(grep -oP '使用率: \K[\d.]+' monitoring_report.txt || echo "0")
          
          # 使用率が90%以上の場合はエラー
          if (( $(echo "$USAGE_PERCENT > 90" | bc -l) )); then
            echo "❌ Database is at critical capacity (${USAGE_PERCENT}%)" >> $GITHUB_STEP_SUMMARY
            exit 1
          elif (( $(echo "$USAGE_PERCENT > 80" | bc -l) )); then
            echo "⚠️ Database usage is high (${USAGE_PERCENT}%)" >> $GITHUB_STEP_SUMMARY
            echo "capacity_warning=true" >> $GITHUB_ENV
          else
            echo "✅ Database capacity is healthy (${USAGE_PERCENT}%)" >> $GITHUB_STEP_SUMMARY
          fi
        env:
          EXPO_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          EXPO_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: 🎯 Execute unified sync
        id: sync
        run: |
          echo "## 🎯 Unified Product Sync Execution" >> $GITHUB_STEP_SUMMARY
          
          # 環境変数の設定
          export SYNC_MODE="${{ github.event.inputs.sync_mode || 'full' }}"
          export PRIORITY_FILTER="${{ github.event.inputs.priority_filter || 'all' }}"
          export TARGET_AGE="${{ github.event.inputs.target_age_group || 'all' }}"
          export TARGET_BRANDS="${{ github.event.inputs.target_brands || '' }}"
          export PRODUCT_LIMIT="${{ github.event.inputs.product_limit || 'progressive' }}"
          export ENABLE_FEATURES="${{ github.event.inputs.enable_features || 'all' }}"
          export DRY_RUN="${{ github.event.inputs.dry_run || 'false' }}"
          export CURRENT_SEASON="${{ env.season }}"
          export CAPACITY_WARNING="${{ env.capacity_warning || 'false' }}"
          
          # 時刻によるモード自動調整
          HOUR=$(date +%H)
          if [ "$GITHUB_EVENT_NAME" == "schedule" ]; then
            if [ "$HOUR" -eq 17 ]; then  # UTC 17:00 = JST 2:00
              echo "- Auto mode: Full sync (night schedule)" >> $GITHUB_STEP_SUMMARY
              export SYNC_MODE="full"
            else
              echo "- Auto mode: MVP sync (day schedule)" >> $GITHUB_STEP_SUMMARY
              export SYNC_MODE="mvp"
            fi
          fi
          
          # ドライランモード
          if [ "$DRY_RUN" == "true" ]; then
            echo "🔍 Running in DRY RUN mode - no database changes" >> $GITHUB_STEP_SUMMARY
          fi
          
          # 同期実行
          echo "### Starting sync with mode: $SYNC_MODE" >> $GITHUB_STEP_SUMMARY
          
          # Phase 3拡張スクリプトの実行（高画質版）
          node scripts/sync/unified-phase3-sync-hq.js || echo "Sync completed with warnings"
        env:
          EXPO_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          EXPO_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          RAKUTEN_APP_ID: ${{ secrets.RAKUTEN_APP_ID }}
          RAKUTEN_AFFILIATE_ID: ${{ secrets.RAKUTEN_AFFILIATE_ID }}
          NODE_ENV: production
        continue-on-error: true

      - name: 🧹 Post-sync maintenance
        if: github.event.inputs.maintenance_tasks != 'none' && steps.sync.outcome == 'success'
        run: |
          echo "## 🧹 Maintenance Tasks" >> $GITHUB_STEP_SUMMARY
          
          MAINTENANCE="${{ github.event.inputs.maintenance_tasks || 'all' }}"
          
          # メンテナンスタスクの実行
          if [[ "$MAINTENANCE" == "all" || "$MAINTENANCE" == "cleanup" ]]; then
            echo "### 🗑️ Smart Product Deletion" >> $GITHUB_STEP_SUMMARY
            
            # 容量ベースの削除判断
            USAGE_PERCENT=$(grep -oP '使用率: \K[\d.]+' monitoring_report.txt || echo "0")
            if (( $(echo "$USAGE_PERCENT > 60" | bc -l) )); then
              echo "容量使用率が${USAGE_PERCENT}%のため、削除処理を実行します" >> $GITHUB_STEP_SUMMARY
              node scripts/maintenance/smart-deletion-manager.js --dry-run >> deletion_report.txt 2>&1 || true
              
              # ドライラン結果の表示
              if [ -f deletion_report.txt ]; then
                echo "#### 削除候補:" >> $GITHUB_STEP_SUMMARY
                grep -E "削除対象:|古い商品:|低優先度:|季節外れ:|非アクティブ:" deletion_report.txt | head -10 >> $GITHUB_STEP_SUMMARY || true
              fi
              
              # 容量が80%以上の場合は実際に削除
              if (( $(echo "$USAGE_PERCENT > 80" | bc -l) )); then
                echo "⚠️ 容量が高いため実際に削除を実行" >> $GITHUB_STEP_SUMMARY
                CI=true node scripts/maintenance/smart-deletion-manager.js >> $GITHUB_STEP_SUMMARY 2>&1 || true
              fi
            else
              echo "容量使用率が${USAGE_PERCENT}%のため、削除は不要です" >> $GITHUB_STEP_SUMMARY
            fi
          fi
          
          if [[ "$MAINTENANCE" == "all" || "$MAINTENANCE" == "optimize" ]]; then
            echo "### ⚡ Optimizing database" >> $GITHUB_STEP_SUMMARY
            node scripts/maintenance/optimize-database.js >> $GITHUB_STEP_SUMMARY 2>&1 || true
          fi
          
          if [[ "$MAINTENANCE" == "all" || "$MAINTENANCE" == "stats" ]]; then
            echo "### 📊 Updating statistics" >> $GITHUB_STEP_SUMMARY
            node scripts/maintenance/update-statistics.js >> $GITHUB_STEP_SUMMARY 2>&1 || true
          fi
          
          if [[ "$MAINTENANCE" == "all" || "$MAINTENANCE" == "rotation" ]]; then
            echo "### 🔄 Rotating products" >> $GITHUB_STEP_SUMMARY
            # 古い削除スクリプトの代わりにスマート削除を使用
            DRY_RUN=false CI=true node scripts/maintenance/smart-deletion-manager.js >> $GITHUB_STEP_SUMMARY 2>&1 || true
          fi
        env:
          EXPO_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          EXPO_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: 🚨 Emergency capacity check
        if: always()
        run: |
          echo "## 🚨 Emergency Capacity Check" >> $GITHUB_STEP_SUMMARY
          
          # 現在の容量を再確認
          node scripts/monitoring/supabase-free-tier-monitor.js > final_capacity_check.txt 2>&1 || true
          
          if [ -f final_capacity_check.txt ]; then
            FINAL_USAGE=$(grep -oP '使用率: \K[\d.]+' final_capacity_check.txt || echo "0")
            
            echo "最終容量使用率: ${FINAL_USAGE}%" >> $GITHUB_STEP_SUMMARY
            
            # 90%を超えている場合は緊急削除
            if (( $(echo "$FINAL_USAGE > 90" | bc -l) )); then
              echo "❌ 容量が危険水準(${FINAL_USAGE}%)です！緊急削除を実行" >> $GITHUB_STEP_SUMMARY
              node scripts/maintenance/emergency-deletion.js >> $GITHUB_STEP_SUMMARY 2>&1 || true
            elif (( $(echo "$FINAL_USAGE > 80" | bc -l) )); then
              echo "⚠️ 容量が警告水準(${FINAL_USAGE}%)です" >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ 容量は健全(${FINAL_USAGE}%)です" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        env:
          EXPO_PUBLIC_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          EXPO_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

      - name: 📊 Generate comprehensive report
        if: always()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Sync Report Summary" >> $GITHUB_STEP_SUMMARY
          
          # 同期結果
          if [ "${{ steps.sync.outcome }}" == "success" ]; then
            echo "### ✅ Sync Status: Success" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Sync Status: Failed or Partial" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Phase 3ブランド統計
          echo "### 📈 Phase 3 Brand Categories (50-60 brands)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "#### 🎯 Age Group Coverage:" >> $GITHUB_STEP_SUMMARY
          echo "- **20-24歳**: GU, WEGO, ZARA, H&M, DHOLIC (プチプラ・トレンド)" >> $GITHUB_STEP_SUMMARY
          echo "- **25-29歳**: coca, pierrot, fifth, PLST, vis (オフィス・きれいめ)" >> $GITHUB_STEP_SUMMARY
          echo "- **30-34歳**: URBAN RESEARCH, BEAMS, 無印良品, studio CLIP (質重視)" >> $GITHUB_STEP_SUMMARY
          echo "- **35-39歳**: ROPE', 23区, nest Robe, SM2 (上質カジュアル)" >> $GITHUB_STEP_SUMMARY
          echo "- **40-45歳**: Theory, TOMORROWLAND, GALLARDAGALANTE (エレガント)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "#### 💰 Price Range Distribution:" >> $GITHUB_STEP_SUMMARY
          echo "- **プチプラ** (〜5,000円): 15 brands" >> $GITHUB_STEP_SUMMARY
          echo "- **ミドル** (5,000〜15,000円): 20 brands" >> $GITHUB_STEP_SUMMARY
          echo "- **ハイミドル** (15,000〜30,000円): 15 brands" >> $GITHUB_STEP_SUMMARY
          echo "- **ハイブランド** (30,000円〜): 10 brands" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "#### 👗 Style Categories:" >> $GITHUB_STEP_SUMMARY
          echo "- **カジュアル**: UNIQLO, GU, GAP, GLOBAL WORK" >> $GITHUB_STEP_SUMMARY
          echo "- **オフィス/きれいめ**: PLST, vis, ROPE', NATURAL BEAUTY BASIC" >> $GITHUB_STEP_SUMMARY
          echo "- **フェミニン**: MISCH MASCH, Apuweiser-riche, JILL STUART" >> $GITHUB_STEP_SUMMARY
          echo "- **モード/個性派**: ZARA, COS, STUDIOUS, ENFOLD" >> $GITHUB_STEP_SUMMARY
          echo "- **ナチュラル**: 無印良品, studio CLIP, SM2, nest Robe" >> $GITHUB_STEP_SUMMARY
          echo "- **韓国系**: DHOLIC, 17kg, HOTPING" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 現在の統計を取得
          echo "### 📊 Current Statistics" >> $GITHUB_STEP_SUMMARY
          node scripts/testing/check-current-brands.js >> $GITHUB_STEP_SUMMARY 2>&1 || echo "- Statistics unavailable" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 推奨アクション
          echo "### 💡 Next Actions" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.sync.outcome }}" != "success" ]; then
            echo "1. Check sync logs for specific errors" >> $GITHUB_STEP_SUMMARY
            echo "2. Verify API rate limits" >> $GITHUB_STEP_SUMMARY
            echo "3. Review failed brand syncs" >> $GITHUB_STEP_SUMMARY
          else
            echo "1. Monitor user engagement by age group" >> $GITHUB_STEP_SUMMARY
            echo "2. Analyze style preference trends" >> $GITHUB_STEP_SUMMARY
            echo "3. Review seasonal product performance" >> $GITHUB_STEP_SUMMARY
            echo "4. Check brand coverage gaps" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 💾 Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unified-sync-logs-${{ github.run_id }}
          path: |
            logs/
            data/sync-history*.json
            *.log
            capacity_report.txt
          retention-days: 30
          if-no-files-found: ignore

      - name: 🎉 Success celebration
        if: success()
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎉 Phase 3 Unified Sync Completed Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Achievements:" >> $GITHUB_STEP_SUMMARY
          echo "- Successfully synchronized 50-60 brands for 20-40s women" >> $GITHUB_STEP_SUMMARY
          echo "- Covered all age groups with appropriate brand selection" >> $GITHUB_STEP_SUMMARY
          echo "- Maintained price range diversity for all budgets" >> $GITHUB_STEP_SUMMARY
          echo "- Applied seasonal optimization for current trends" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Target**: 50,000+ products | **Brands**: 50-60 | **Age**: 20-40s women" >> $GITHUB_STEP_SUMMARY
