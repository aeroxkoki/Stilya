require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = '0' if podfile_properties['newArchEnabled'] == 'false'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

target 'Stilya' do
  use_expo_modules!

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"];
  else
    config_command = [
      'npx',
      'expo-modules-autolinking',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

  config = use_native_modules!(config_command)

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # This is necessary for Xcode 14, because it signs resource bundles by default
    # when building for devices.
    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end
    
    # =========================================
    # 🚀 Stilya ビルド時間最適化設定
    # =========================================
    
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        # デバッグビルドの最適化
        if config.name == 'Debug'
          # アクティブアーキテクチャのみビルド
          config.build_settings['ONLY_ACTIVE_ARCH'] = 'YES'
          
          # Swiftコンパイル最適化
          config.build_settings['SWIFT_COMPILATION_MODE'] = 'singlefile'
          config.build_settings['SWIFT_OPTIMIZATION_LEVEL'] = '-Onone'
          
          # C/C++コンパイル最適化
          config.build_settings['GCC_OPTIMIZATION_LEVEL'] = '0'
          
          # ビットコード無効化
          config.build_settings['ENABLE_BITCODE'] = 'NO'
          
          # インデックスストア無効化（ビルド時間短縮）
          config.build_settings['COMPILER_INDEX_STORE_ENABLE'] = 'NO'
          
          # メタルデバッグ情報無効化
          config.build_settings['MTL_ENABLE_DEBUG_INFO'] = 'NO'
          
          # デバッグシンボルを最小化
          config.build_settings['DEBUG_INFORMATION_FORMAT'] = 'dwarf'
          
          # プリコンパイルヘッダーの利用
          config.build_settings['GCC_PRECOMPILE_PREFIX_HEADER'] = 'YES'
          
          # モジュールデバッグ無効化
          config.build_settings['CLANG_ENABLE_MODULE_DEBUGGING'] = 'NO'
          
          # アセットカタログコンパイル最適化
          config.build_settings['ASSETCATALOG_COMPILER_OPTIMIZATION'] = 'time'
          
          # その他の最適化
          config.build_settings['VALIDATE_PRODUCT'] = 'NO'
          config.build_settings['ENABLE_PREVIEWS'] = 'NO'
        end
        
        # 全ビルド設定共通
        # 不要なアーキテクチャを除外
        config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
        
        # 並列ビルドを有効化
        config.build_settings['ENABLE_PARALLEL_CODE_SIGNING'] = 'YES'
        
        # 警告を抑制（ビルド時間短縮）
        config.build_settings['GCC_WARN_INHIBIT_ALL_WARNINGS'] = 'YES'
        config.build_settings['SWIFT_SUPPRESS_WARNINGS'] = 'YES'
        
        # 不要なPodを条件付きで無効化
        if target.name.include?('Expo') && !['expo-constants', 'expo-dev-client', 'expo-image', 'expo-linking', 'expo-status-bar'].any? { |required| target.name.include?(required) }
          # 使用していないExpoモジュールのビルドを簡略化
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] ||= ['$(inherited)']
          config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] << 'MINIMAL_BUILD=1'
        end
      end
    end
    
    # Xcodeプロジェクトの最適化
    installer.generated_projects.each do |project|
      project.build_configurations.each do |config|
        if config.name == 'Debug'
          config.build_settings['SWIFT_COMPILATION_MODE'] = 'singlefile'
          config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'NO'
        end
      end
    end
  end
end
